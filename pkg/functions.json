{"break":{"docs":"Exit early from a loop.\n\n`break()` terminates the execution of the current loop.\n\n```scarpet\nfor([1, 2, 3], if(_ == 2, break()));\n```\n\n# break\ns","data":{"signatures":[{"params":[]},{"params":[{"name":"value"}]}]}},"c_for":{"docs":"Mimics a C-Style `for` loop `for (init; condition; increment) { body }`\n\n```java\nfor (int i = 0; i < 5; i += 1) {\n    printf(\"%d\\n\", i);\n}\n```\n\n```scarpet\nc_for(i = 0, i < 5, i += 1, print(i));\n```","data":{"signatures":[{"params":[{"name":"init"},{"name":"condition"},{"name":"increment"},{"name":"body"}]}]}},"call":{"docs":"Calls a function with the provided arguments.\n\nFunction values cannot be called directly and can only be executed with\n`call()`.\n\n```scarpet\nf = (_(x) -> x + 1);\nval = call(f, 12);\nval == 13\n```\n\n`call()` can also invoke functions by name.\n\n```scarpet\nf(x) -> x + 1;\nval = call('f', 12);\n```\n\n`call()` resolves function names from the call site.","data":{"signatures":[{"params":[{"name":"function"},{"name":"args","rest":true}]}]}},"continue":{"docs":"Skip to the next iteration of the loop.\n\n`continue()` terminates execution of the current iteration skipping to the next.\n\n```scarpet\nfor([1, 2, 3, 4],\n    if(_ == 3, continue());\n    print(_); // 1, 2, 4\n);\n```","data":{"signatures":[{"params":[]},{"params":[{"name":"value"}]}]}},"for":{"docs":"Iterate over each item in an iterable value.\n\n`for()` takes two arguments, an iterable value such as a `list` or a `map`\n(iterates over the keys of the map), and an expression to evaluate for every\nitem. The expression receives two bound variables `_` (value) and `_i` (current\niteration number) are supplied to the expression.\n\n```scarpet\nfor([1, 2, 3, 4, 5], print(_));\n```\n\n`for()` returns the number of times the expression evaluated to a successful\nvalue.\n\nLike other looping functions `for()` supports `break()` and `continue()`. An\noptional argument can be passed to `break()` or `continue()` to determine if the\niteration was successful.\n\n```scarpet\ni = for([42, 12, 56, 29], print(_i)); // 0, 1, 2, 3\ni; // 4\n```","data":{"signatures":[{"params":[{"name":"iterable"},{"name":"body","binds":["_","_i"]}],"returns":"number"}]}},"if":{"docs":"Evaluate an expression if a condition holds.\n\n```scarpet\nif(1 == 2, print('oops, maths broke'));\n```\n\n`if()` can also be used as an expression. An extra argument can be specified to\nact as an `else` block.\n\n```scarpet\nmessage = if(player()~'gamemode' == 'creative',\n    'Hi cheater',\n    'Hello friend',\n);\n```\n\nUnlike most programming languages there is no `else if`. More conditions and\nexpression can be added as arguments to the `if()` call.\n\n```scarpet\nif(gamemode == 'creative',\n    'player is in creative',\n    gamemode == 'survival',\n    'player is in survival',\n    'player is not in creative or survival',\n);\n```","data":{"signatures":[{"params":[{"name":"condition"},{"name":"if_true"}]},{"params":[{"name":"condition"},{"name":"if_true"},{"name":"if_false"}]}]}},"outer":{"docs":"Captures a variable from the outer scope.\n\n```scarpet\nx = 2;\nf(outer(x)) -> x += 1;\nf();\nx == 3\n```\n\n`outer()` can only exist inside a function signature and only takes a single\nvariable name as a parameter.","data":{"signatures":[{"params":[{"name":"variable","type":"variable"}]}]}},"return":{"docs":"Return a value from a function.\n\nA `return()` marks the end of an execution path in a function:\n\n```scarpet\nfoo() -> (\n    return(2);\n);\n```\n\n`return()` is not needed when the returned value is the last expression in the\nfunction:\n\n```scarpet\nfoo() -> (\n    3\n);\n```\n\nA `return()` with no arguments returns [`null`]({{ '/constants/null/' | relative_url }}).","data":{"signatures":[{"params":[]},{"params":[{"name":"value"}]}]}},"then":{"docs":"Evaluate more than one expression sequentially.\n\n```scarpet\nthen(expr_1, expr_2);\n```\n\n```scarpet\nexpr_1;\nexpr_2;\n```","data":{"signatures":[{"params":[{"name":"expr","rest":true}]}]}},"while":{"docs":"Loop while a condition holds.\n\n`while()` evaluates an expression repeatedly while its condition evaluates to\n`true`. The expression receives a bound variable `_` indicating the current\niteration number.\n\nReturns the result of the last iteration or `null`.\n\n```scarpet\ni = 0;\nwhile(i < 5,\n    print(_);\n    i += 1;\n);\n```\n\n`while()` may also be called with three arguments. Where the second argument\nspecifies an upper limit for the number of times to loop.\n\n```scarpet\ni = 0;\nwhile(i < 7, 5, // can only loop 5 times\n    print(_);\n    i += 1;\n);\n```","data":{"signatures":[{"params":[{"name":"condition"},{"name":"body","binds":["_"]}]},{"params":[{"name":"condition"},{"name":"limit","type":"number"},{"name":"body","binds":["_"]}]}]}},"bool":{},"copy":{},"number":{},"str":{"data":{"signatures":[{"params":[{"name":"value"}],"returns":"str"},{"params":[{"name":"format","type":"str"},{"name":"args","rest":true}],"returns":"str"}]}},"type":{},"abs":{},"acos":{},"acosh":{},"acot":{},"asin":{},"asinh":{},"atan":{},"atan2":{},"atanh":{},"ceil":{},"cos":{},"cosh":{},"cot":{},"coth":{},"csc":{},"csch":{},"deg":{},"fact":{},"floor":{},"ln":{},"ln1p":{},"log":{},"log10":{},"log1p":{},"mandelbrot":{},"max":{},"min":{},"rad":{},"relu":{},"round":{},"sec":{},"sech":{},"sin":{},"sinh":{},"sqrt":{},"tan":{},"tanh":{}}